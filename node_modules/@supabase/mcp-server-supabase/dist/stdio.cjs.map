{"version":3,"sources":["/Users/grichardson/Documents/dev/supabase/mcp-server-supabase/packages/mcp-server-supabase/dist/stdio.cjs","../src/stdio.ts"],"names":["version","package_default","main","cliAccessToken","projectId","readOnly","apiUrl","showVersion","parseArgs","accessToken","server","createSupabaseMcpServer","transport","StdioServerTransport"],"mappings":"AAAA;AACA,yKAA+C,oECCV,4BACX,GAIpB,CAAE,OAAA,CAAAA,CAAQ,CAAA,CAAIC,mBAAAA,CAEpB,MAAA,SAAeC,CAAAA,CAAAA,CAAO,CACpB,GAAM,CACJ,MAAA,CAAQ,CACN,CAAC,cAAc,CAAA,CAAGC,CAAAA,CAClB,CAAC,aAAa,CAAA,CAAGC,CAAAA,CACjB,CAAC,WAAW,CAAA,CAAGC,CAAAA,CACf,CAAC,SAAS,CAAA,CAAGC,CAAAA,CACb,CAAC,SAAS,CAAA,CAAGC,CACf,CACF,CAAA,CAAIC,6BAAAA,CACF,OAAA,CAAS,CACN,cAAA,CAAiB,CAChB,IAAA,CAAM,QACR,CAAA,CACC,aAAA,CAAgB,CACf,IAAA,CAAM,QACR,CAAA,CACC,WAAA,CAAc,CACb,IAAA,CAAM,SAAA,CACN,OAAA,CAAS,CAAA,CACX,CAAA,CACC,SAAA,CAAY,CACX,IAAA,CAAM,QACR,CAAA,CACC,OAAA,CAAY,CACX,IAAA,CAAM,SACR,CACF,CACF,CAAC,CAAA,CAEGD,CAAAA,EAAAA,CACF,OAAA,CAAQ,GAAA,CAAIP,CAAO,CAAA,CACnB,OAAA,CAAQ,IAAA,CAAK,CAAC,CAAA,CAAA,CAIhB,IAAMS,CAAAA,kBAAcN,CAAAA,SAAkB,OAAA,CAAQ,GAAA,CAAI,uBAAA,CAE7CM,CAAAA,EAAAA,CACH,OAAA,CAAQ,KAAA,CACN,iIACF,CAAA,CACA,OAAA,CAAQ,IAAA,CAAK,CAAC,CAAA,CAAA,CAGhB,IAAMC,CAAAA,CAASC,iCAAAA,CACb,QAAA,CAAU,CACR,WAAA,CAAAF,CAAAA,CACA,MAAA,CAAAH,CACF,CAAA,CACA,SAAA,CAAAF,CAAAA,CACA,QAAA,CAAAC,CACF,CAAC,CAAA,CAEKO,CAAAA,CAAY,IAAIC,6BAAAA,CAEtB,MAAMH,CAAAA,CAAO,OAAA,CAAQE,CAAS,CAChC,CAEAV,CAAAA,CAAK,CAAA,CAAE,KAAA,CAAM,OAAA,CAAQ,KAAK,CAAA","file":"/Users/grichardson/Documents/dev/supabase/mcp-server-supabase/packages/mcp-server-supabase/dist/stdio.cjs","sourcesContent":[null,"#!/usr/bin/env node\n\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport { parseArgs } from 'node:util';\nimport packageJson from '../package.json' with { type: 'json' };\nimport { createSupabaseMcpServer } from './server.js';\n\nconst { version } = packageJson;\n\nasync function main() {\n  const {\n    values: {\n      ['access-token']: cliAccessToken,\n      ['project-ref']: projectId,\n      ['read-only']: readOnly,\n      ['api-url']: apiUrl,\n      ['version']: showVersion,\n    },\n  } = parseArgs({\n    options: {\n      ['access-token']: {\n        type: 'string',\n      },\n      ['project-ref']: {\n        type: 'string',\n      },\n      ['read-only']: {\n        type: 'boolean',\n        default: false,\n      },\n      ['api-url']: {\n        type: 'string',\n      },\n      ['version']: {\n        type: 'boolean',\n      },\n    },\n  });\n\n  if (showVersion) {\n    console.log(version);\n    process.exit(0);\n  }\n\n  // Use access token from CLI argument or environment variable\n  const accessToken = cliAccessToken ?? process.env.SUPABASE_ACCESS_TOKEN;\n\n  if (!accessToken) {\n    console.error(\n      'Please provide a personal access token (PAT) with the --access-token flag or set the SUPABASE_ACCESS_TOKEN environment variable'\n    );\n    process.exit(1);\n  }\n\n  const server = createSupabaseMcpServer({\n    platform: {\n      accessToken,\n      apiUrl,\n    },\n    projectId,\n    readOnly,\n  });\n\n  const transport = new StdioServerTransport();\n\n  await server.connect(transport);\n}\n\nmain().catch(console.error);\n"]}